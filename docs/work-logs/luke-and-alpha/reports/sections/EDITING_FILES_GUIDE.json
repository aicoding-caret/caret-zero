{
	"tools": [
		{
			"name": "write_to_file",
			"purpose": "Create a new file, or overwrite the entire contents of an existing file.",
			"when_to_use": [
				"Initial file creation, such as when scaffolding a new project.",
				"Overwriting large boilerplate files where you want to replace the entire content at once.",
				"When the complexity or number of changes would make replace_in_file unwieldy or error-prone.",
				"When you need to completely restructure a file's content or change its fundamental organization."
			],
			"important_considerations": [
				"Using write_to_file requires providing the file's complete final content.",
				"If you only need to make small changes to an existing file, consider using replace_in_file instead to avoid unnecessarily rewriting the entire file.",
				"While write_to_file should not be your default choice, don't hesitate to use it when the situation truly calls for it.",
				"**CRITICAL:** Before using `write_to_file`, always ensure critical data is backed up or a checkpoint is saved, as this operation overwrites the entire file and cannot be easily undone."
			]
		},
		{
			"name": "replace_in_file",
			"purpose": "Make targeted edits to specific parts of an existing file without overwriting the entire file.",
			"when_to_use": [
				"Small, localized changes like updating a few lines, function implementations, changing variable names, modifying a section of text, etc.",
				"Targeted improvements where only specific portions of the file's content needs to be altered.",
				"Especially useful for long files where much of the file will remain unchanged."
			],
			"advantages": [
				"More efficient for minor edits, since you don't need to supply the entire file content.",
				"Reduces the chance of errors that can occur when overwriting large files."
			]
		}
	],
	"choosing_the_appropriate_tool": [
		"Default to replace_in_file for most changes. It's the safer, more precise option that minimizes potential issues.",
		"Use write_to_file when: Creating new files, The changes are so extensive that using replace_in_file would be more complex or risky, You need to completely reorganize or restructure a file, The file is relatively small and the changes affect most of its content, You're generating boilerplate or template files"
	],
	"auto_formatting_considerations": [
		"After using either write_to_file or replace_in_file, the user's editor may automatically format the file",
		"This auto-formatting may modify the file contents, for example: Breaking single lines into multiple lines, Adjusting indentation to match project style (e.g. 2 spaces vs 4 spaces vs tabs), Converting single quotes to double quotes (or vice versa based on project preferences), Organizing imports (e.g. sorting, grouping by type), Adding/removing trailing commas in objects and arrays, Enforcing consistent brace style (e.g. same-line vs new-line), Standardizing semicolon usage (adding or removing based on style)",
		"The write_to_file and replace_in_file tool responses will include the final state of the file after any auto-formatting",
		"Use this final state as your reference point for any subsequent edits. This is ESPECIALLY important when crafting SEARCH blocks for replace_in_file which require the content to match what's in the file exactly."
	],
	"workflow_tips": [
		"Before editing, assess the scope of your changes and decide which tool to use.",
		"For targeted edits, apply replace_in_file with carefully crafted SEARCH/REPLACE blocks. If you need multiple changes, you can stack multiple SEARCH/REPLACE blocks within a single replace_in_file call.",
		"For major overhauls or initial file creation, rely on write_to_file.",
		"Once the file has been edited with either write_to_file or replace_in_file, the system will provide you with the final state of the modified file. Use this updated content as the reference point for any subsequent SEARCH/REPLACE operations, since it reflects any auto-formatting or user-applied changes.",
		"By thoughtfully selecting between write_to_file and replace_in_file, you can make your file editing process smoother, safer, and more efficient."
	]
}
